name: stream-connectors-dependencies

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - dependencies/**
  push:
    branches:
      - develop
      - master
    paths:
      - dependencies/**

jobs:
  get-environment:
    uses: ./.github/workflows/get-environment.yml

  package:
    needs: [get-environment]

    strategy:
      fail-fast: false
      matrix:
        distrib: [el8, el9, bullseye]
        lib: [lua-cffi, lua-tz, lua-curl]
        include:
          - package_extension: rpm
            image: packaging-stream-connectors-alma8
            distrib: el8
          - package_extension: rpm
            image: packaging-stream-connectors-alma9
            distrib: el9
          - package_extension: deb
            image: packaging-stream-connectors-bullseye
            distrib: bullseye

    runs-on: ubuntu-22.04

    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}:latest
      credentials:
        username: ${{ secrets.DOCKER_REGISTRY_ID }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}

    name: package ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install dependencies
        run: |
          if  [ "${{ matrix.package_extension }}" = "rpm" ]; then
            yum install -y yum-utils epel-release
            yum config-manager --set-enabled crb || true
            yum config-manager --set-enabled powertools || true
            yum install -y git make gcc luarocks meson gcc-c++ cmake libffi libffi-devel lua-devel libcurl-devel
          else
            apt update
            apt install -y git make gcc luarocks meson cmake libffi7 libffi-dev lua5.3 liblua5.3-dev
          fi
        shell: bash

      - if: ${{ matrix.lib == 'lua-cffi' }}
        name: Prepare packaging of lua-cffi
        run: |
          luarocks install cffi-lua
          luarocks show cffi-lua | grep "cffi-lua\s[0-9]" | cut -d' ' -f2 | perl -nle 'm/(\d+\.\d+(\.\d+)?)/; print $1' >> version.txt
          cat version.txt

          mkdir ${{ matrix.lib }}
          find /usr/ -type f -name "cffi.so" -exec cp {} ${{ matrix.lib }}/ \;
        working-directory: dependencies/${{ matrix.lib }}
        shell: bash

      - if: ${{ matrix.lib == 'lua-tz' }}
        name: Prepare packaging of lua-tz
        run: |
          luarocks install luatz
          luarocks show luatz | grep "luatz\s[0-9]" | cut -d' ' -f2 | perl -nle 'm/(\d+\.\d+(\.\d+)?)/; print $1' >> version.txt
          cat version.txt

          mkdir ${{ matrix.lib }}
          if  [ "${{ matrix.package_extension }}" = "rpm" ]; then
            cp -rp /usr/share/lua/`lua -e "print(string.sub(_VERSION, 5))"`/luatz/* ${{ matrix.lib }}/
          else
            cp -rp /usr/local/share/lua/`lua -e "print(string.sub(_VERSION, 5))"`/luatz/* ${{ matrix.lib }}/
          fi

        working-directory: dependencies/${{ matrix.lib }}
        shell: bash

      - if: ${{ matrix.lib == 'lua-curl' && matrix.package_extension == 'rpm' }}
        name: Checkout sources of lua-curl
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: Lua-cURL/Lua-cURLv3
          path: lua-curl-src
          ref: v0.3.13

      - if: ${{ matrix.lib == 'lua-curl' && matrix.package_extension == 'rpm' }}
        name: Compile lua-curl and prepare packaging
        run: |
          dnf install -y openssl-devel openssl libcurl-devel python3-pip cpanminus

          cpanm \
            IPC::Cmd \
            Digest::SHA \
            Thread::Queue \
            IO::Socket::SSL \
            File::Copy \
            File::Compare

          cd lua-curl-src

          pip3 install conan
          conan profile detect

          cat <<'EOF' >> conanfile.txt
          [requires]
          libcurl/8.0.1
          openssl/1.1.1t
          zlib/1.2.13

          [generators]
          CMakeToolchain

          [options]
          libcurl/*:with_ca_bundle=/etc/ssl/certs/ca-bundle.crt
          libcurl/*:with_ca_fallback=False
          libcurl/*:with_ca_path=/etc/ssl/certs/
          EOF

          conan install . --build=missing --deployer=full_deploy

          sed -i "s#^CURL_LIBS.*#CURL_LIBS=-Lfull_deploy/host/libcurl/8.0.1/Release/x86_64/lib -l:libcurl.a -Lfull_deploy/host/openssl/1.1.1t/Release/x86_64/lib -l:libssl.a -l:libcrypto.a -Lfull_deploy/host/zlib/1.2.13/Release/x86_64/lib -l:libz.a -lpthread#" Makefile
          make

          cd ..

          mkdir -p dependencies/${{ matrix.lib }}/${{ matrix.lib }}/
          cp -p lua-curl-src/lcurl.so dependencies/${{ matrix.lib }}/${{ matrix.lib }}/
          cp -rp lua-curl-src/src/lua/cURL dependencies/${{ matrix.lib }}/${{ matrix.lib }}/
          cp -p lua-curl-src/src/lua/cURL.lua dependencies/${{ matrix.lib }}/${{ matrix.lib }}/

          cd dependencies/${{ matrix.lib }}

          echo "0.3.13" >> version.txt
        shell: bash

      - name: Package
        uses: ./.github/actions/package-nfpm
        with:
          nfpm_file_pattern: "dependencies/${{ matrix.lib }}/packaging/*.yaml"
          distrib: ${{ matrix.distrib }}
          package_extension: ${{ matrix.package_extension }}
          arch: all
          commit_hash: ${{ github.sha }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-${{ matrix.package_extension }}-${{ matrix.distrib }}
          rpm_gpg_key: ${{ secrets.RPM_GPG_SIGNING_KEY }}
          rpm_gpg_signing_key_id: ${{ secrets.RPM_GPG_SIGNING_KEY_ID }}
          rpm_gpg_signing_passphrase: ${{ secrets.RPM_GPG_SIGNING_PASSPHRASE }}

  deliver-rpm:
    if: ${{ contains(fromJson('["unstable", "testing", "stable"]'), needs.get-environment.outputs.stability) }}
    needs: [get-environment, package]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distrib: [el8, el9]
        lib: [lua-cffi, lua-tz, lua-curl]
    name: deliver ${{ matrix.distrib }} ${{ matrix.lib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Publish RPM packages
        uses: ./.github/actions/rpm-delivery
        with:
          module_name: stream-connectors-dependencies
          distrib: ${{ matrix.distrib }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.lib }}-${{ matrix.distrib }}
          stability: ${{ needs.get-environment.outputs.stability }}

  deliver-deb:
    if: ${{ contains(fromJson('["unstable", "testing", "stable"]'), needs.get-environment.outputs.stability) }}
    needs: [get-environment, package]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distrib: [bullseye]
        lib: [lua-cffi, lua-tz]
    name: deliver ${{ matrix.distrib }} ${{ matrix.lib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Publish DEB packages
        uses: ./.github/actions/deb-delivery
        with:
          module_name: stream-connectors-dependencies
          distrib: ${{ matrix.distrib }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-deb-${{ matrix.lib }}-${{ matrix.distrib }}
          stability: ${{ needs.get-environment.outputs.stability }}
